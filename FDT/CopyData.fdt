#!/bin/bash
#set -x
#--------------------------------------------------------------------------
#
# Usage: CopyData.fdt  fdtConfig BaseDir SourceDirectory [RemoteUser@]RemoteHost DestinationDirectory [Comments]
#
# the script is designed to  test copying  bigdata from local host to remote host
# using utility fdt
#
# Creation date: Tue Nov  4 14:22:05 MSK 2014
# by Anatoly  Oreshkin   email:  anatoly.oreshkin@gmail.com
#---------------------------------------------------------------------------
# History of changes:
#
#----------------------------------------------------------------------------


# function to calculate  files size dispersion

calc_dispersion () 
{
# calculate dispersion

# number of files in ${SourceDirectory} 
NoFiles=`ls -1 ${SourceDirectory} | wc -l`
# calculate total size of all files in  ${SourceDirectory}
sum=0

for i in `ls -lk ${SourceDirectory}|grep -v "total" | awk '{print $5}'`

   do
     sum=`expr ${sum} + ${i}`
   done
# calculate average  file size

AverageFileSize=`expr ${sum} / ${NoFiles}`
sum2=0
#  calculate dispersion
for i in `ls -lk ${SourceDirectory}|grep -v "total"|awk '{print $5}'`
 do
    DIFF=`expr ${i} - ${AverageFileSize}`
    DIFF2=`expr ${DIFF} \* ${DIFF}`
    sum2=`expr ${sum2} + ${DIFF2}`
 done
FileSizeDispersion=`expr ${sum2} / ${NoFiles}`

}
#--------------------------------------------------------------
#
#  main part of  the script
#
#--------------------------------------------------------------
LOCAL_HOST=`hostname`
LOCAL_USER=`whoami`
#
#  check  command line parameters
#


if [ "$#" -lt 5 ]; then

    cat <<END
------------------------------------------------------------------------------------------------------------
     the script is designed to  test copying  bigdata from local host to remote host using utility fdt

  Usage: $0   <fdt_config_file> <BaseDir> <SourceDirectory> [<RemoteUser>@]<RemoteHost> <DestinationDirectory/dev/null> [<Comments>]

               fdt_config_file  -- fdt configuration file for tuning fdt, may be empty
               BaseDir -- directory where to write transfer proccess logging information
               SourceDirectory -- directory/single file  on local host to be transferred
               RemoteUser -- destination remote user, if omitted local user selected
               RemoteHost -- destination remote host name
               DestinationDirectory -- destination directory on RemoteHost or /dev/null
               Comments -- comments 
 ------------------------------------------------------------------------------------------------------------
END
   exit 1
fi

LOG_FILE=/tmp/fdt-Log-`date +"%Y-%m-%d_%H:%M:%S"`
(
fdtConfig=$1
BASE_DIR=$2
SourceDirectory=$3
# REMOTE_USER@REMOTE_HOST   $4
# check if REMOTE_USER specified
REMOTE_HOST=`echo $4 | awk -F"@" '{print $2}'`
if [ -z ${REMOTE_HOST} ]; then
  REMOTE_HOST=$4
  REMOTE_USER=${LOCAL_USER}
else
  REMOTE_USER=`echo $4 | awk -F"@" '{print $1}'`
  REMOTE_HOST=`echo $4 | awk -F"@" '{print $2}'`
fi

DestinationDirectory=$5
shift; shift; shift; shift; shift;  
comments="$@"  


# directory size
DirSize=`du -s ${SourceDirectory}  | awk '{print $1}'`

# number of files
NoFiles=`ls -1 ${SourceDirectory} | wc -l`

# average file size
AverageFileSize=0

# File size dispersion
FileSizeDispersion=0

# calculate files size dispersion
calc_dispersion

# file with  list of files to be transferred
#FileList=/tmp/fdt$$

#find ${SourceDirectory} -type f -print > ${FileList}

#Added by Stefanos Georgiou
param="$(cat ${fdtConfig})"
parame="$(echo $param | sed 's/--//g')"
parameter="$(echo $parame | sed -e 's/ /_/g')"

# subdirectory to write  logging  information
SUB_BASE_DIR=${BASE_DIR}/`basename ${0}`.${LOCAL_HOST}.${REMOTE_HOST}.`date +"%Y-%m-%d_%H:%M:%S"`.${parameter}

#SOSREPORT=${SUB_BASE_DIR}/SOSREPORT.${LOCAL_HOST}
PING=${SUB_BASE_DIR}/PING.${LOCAL_HOST}.${REMOTE_HOST}
TRACEROUTE=${SUB_BASE_DIR}/TRACEROUTE.${LOCAL_HOST}.${REMOTE_HOST}
COMMENTS=${SUB_BASE_DIR}/COMMENTS.${LOCAL_HOST}.${REMOTE_HOST}
ABSTRACT=${SUB_BASE_DIR}/ABSTRACT.${LOCAL_HOST}.${REMOTE_HOST}
LOG=${SUB_BASE_DIR}/LOG.FDT.${LOCAL_HOST}.${REMOTE_HOST}

#
# Parameters of fdt
#
#
# -ss <wsz> Set the TCP SO_SND_BUFFER size. M and K may be used as suffixes for Kilo/Mega.
#
# -P <noOfStreams> Number of paralel streams to use. Default is 4.
#
# 

PARAM=`cat ${fdtConfig}`
COMMAND_LINE="java -jar fdt.jar   ${PARAM}   -r   \
  ${SourceDirectory} -c ${REMOTE_HOST} -d ${DestinationDirectory} "
             


#
#  create subdirectory with name ScriptName.LocalHost.RemoteHost.DateTime
# 

echo 
echo "Create subdirectory ${SUB_BASE_DIR} "
echo
if [ -d ${SUB_BASE_DIR} ]; then
    echo "subdirectory ${SUB_BASE_DIR} already exist "
    echo ""
else 
    if ( mkdir ${SUB_BASE_DIR} ); then
       echo "subdirectory ${SUB_BASE_DIR} created successfully"
       echo
    else
       echo "failed to create subdirectory ${SUB_BASE_DIR}"
       echo
       exit 1
    fi
fi 




# comments

echo $comments > ${COMMENTS}
echo "fdt tuning parameters:" >> ${COMMENTS}
cat  ${fdtConfig} >> ${COMMENTS}
 
# fill in ABSTRACT content 
echo "Start time = `date`" >> ${ABSTRACT}
echo "Command line = ${COMMAND_LINE}" >> ${ABSTRACT}
echo "Total data size to transfer(KB) = ${DirSize}" >> ${ABSTRACT}
echo "Number of files = ${NoFiles}" >> ${ABSTRACT}
echo "Source directory(or single file) with files = ${SourceDirectory}" >> ${ABSTRACT}
echo "Average file size(KB) = ${AverageFileSize}" >> ${ABSTRACT}
echo "File size dispersion = ${FileSizeDispersion}" >> ${ABSTRACT}
echo "Local host name = ${LOCAL_HOST}" >> ${ABSTRACT}
echo "Remote host name = ${REMOTE_HOST}" >> ${ABSTRACT}
echo "Remote host directory = ${DestinationDirectory}" >> ${ABSTRACT}

#
#  transferring data to remote host
#

   cat <<END

 Beginning  data  transfer to ${REMOTE_HOST} ...  
 Start time =  `date`
 Command line = ${COMMAND_LINE}
 Local host name = ${LOCAL_HOST}
 Source directory(or single file) with files = ${SourceDirectory} 
 Total data size to transfer (KB) = ${DirSize}
 Number of files = ${NoFiles}
 Average file size (KB) = ${AverageFileSize}
 File size dispersion = ${FileSizeDispersion}
 Remote host name = ${REMOTE_HOST}
 Remote host directory = ${DestinationDirectory}

END

STARTTIME=$(date +"%s")

if ( ${COMMAND_LINE} 2>&1 | tee ${LOG} ); then

# data transfer success
 ENDTIME=$(date +"%s")  
 ELAPSEDTIME=$((${ENDTIME}-${STARTTIME}))
 TransferRate=`expr ${DirSize} / ${ELAPSEDTIME}`

 echo "Data size transferred (KB) = ${DirSize}" >> ${ABSTRACT}
 echo " Data size transferred (KB)= ${DirSize}"
 echo "End time = `date`">> ${ABSTRACT}
 echo "Completion = YES" >> ${ABSTRACT}
 echo "Average transfer speed (KB/sec) = ${TransferRate}" >> ${ABSTRACT}
 echo " Average transfer speed (KB/sec) = ${TransferRate}" 
 echo " Elapsed time  (sec) = ${ELAPSEDTIME}" 
#
 echo " Data transfer completed successfuly"
else
# data transfer failed
 ENDTIME=$(date +"%s")
 ELAPSEDTIME=$((${ENDTIME}-${STARTTIME}))
 echo "Data size transferred (KB) = not available" >> ${ABSTRACT}
 echo " Data size transferred (KB) = not available"
 echo "End time = `date`" >> ${ABSTRACT}
 echo "Completion = ABNORMAL" >> ${ABSTRACT}
 echo " Data transfer completed abnormally"
 echo " Elapsed time  (sec) = ${ELAPSEDTIME}"
fi

#
# sosreport
#
#sosreport > ${SOSREPORT}

echo " Creating sosreport ..."
sosreport --batch --tmp-dir ${SUB_BASE_DIR} --name ${LOCAL_HOST}.${REMOTE_HOST}  > /dev/null 2>&1
echo " Creating sosreport completed"

# ping remote host
echo " ping ${REMOTE_HOST} ..." 
ping -c 10 ${REMOTE_HOST} > ${PING}

# traceroute remote host
echo " traceroute ${REMOTE_HOST} ..."
traceroute ${REMOTE_HOST}  > ${TRACEROUTE}

    cat <<END
 End time =  `date`

 End of script $0
 The Log is available at ${LOG_FILE}
END

) 2>& 1 | tee ${LOG_FILE}
#rm -f ${FileList}
